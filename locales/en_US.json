{
  "logs": {
    "gemini_clients_loaded": "Loaded and created clients: {count}",
    "gemini_clients_failed": "Failed to create Gemini clients. Error: {error}",
    "gemini_no_clients": "No available Gemini clients.",
    "youtube_analysis_request": "Analyzing video {url} with query: {query}",
    "youtube_analysis_error": "Error analyzing YouTube video: {error}",
    "youtube_download_request": "Request to download {url} (audio_only={audio_only})",
    "youtube_download_file_not_found": "Error: could not find downloaded file for {url}",
    "youtube_download_error": "Error downloading from YouTube: {error}",
    "search_specialist_request": "Launching search assistant with query: '{query}'",
    "search_specialist_success": "Search assistant completed successfully.",
    "search_specialist_error": "Error in search assistant operation: {error}",
    "gemini_search_error_attempt": "Search error (attempt {attempt}/{total}): {error}. Next client...",
    "video_generation_request": "Request to generate video with prompt: '{prompt}'",
    "video_generation_started": "Started video generation operation: {name}. Awaiting completion...",
    "video_generation_status_check": "Checking status of operation {name}...",
    "video_generation_complete": "Video generation complete.",
    "video_saved": "Video saved to {path} ({size_mb} MB)",
    "video_generation_error": "Error generating video: {error}\n{traceback}",
    "photo_generation_request": "Request to generate photo with prompt: '{prompt}'",
    "photo_generation_no_images": "API did not return any generated images.",
    "photo_saved": "Image saved to {path} ({size_mb} MB)",
    "photo_generation_error": "Error generating image: {error}\n{traceback}",
    "gemini_function_call": "Gemini requested a function call: {name} with arguments {args}",
    "gemini_status_callback_error": "Error calling status_callback: {e}",
    "gemini_token_stats": "Token statistics for session {session}: Input={prompt}, Output={output}",
    "gemini_empty_response": "Response from Gemini API is empty or blocked. Reason: {reason}",
    "gemini_api_error": "API Error: {error}. Switching client...",
    "gemini_all_keys_exhausted": "All API keys are exhausted or unavailable.",
    "gemini_critical_error": "Critical error calling Gemini API: {error}\n{traceback}",
    "session_old_format_found": "Found session in old format: '{data}'. Converting...",
    "session_profile_updated": "User profile {user_id} was updated with corrected sessions.",
    "session_file_process_error": "Failed to process session file {path}: {error}",
    "session_stats_update_failed_is_string": "Cannot update stats for session '{session_id}' because its data is a string.",
    "price_model_not_found": "Price model for {model} not found. Cost statistics will not be updated.",
    "instruction_saved": "Instruction saved to {path}",
    "instruction_save_error": "Error saving instruction to {path}: {error}",
    "instruction_load_error": "Error loading instruction from {path}: {error}",
    "instruction_delete_error": "Error deleting instruction {path}: {error}",
    "zip_recursion_depth": "Maximum ZIP recursion depth ({depth}) reached for path: {path}",
    "zip_file_limit": "File limit within a single ZIP archive reached for path: {path}",
    "zip_bad_file": "Attempted to process a corrupted ZIP archive: {path}",
    "zip_process_error": "Error processing ZIP archive {path}: {error}",
    "album_ignored_no_trigger": "Album {id} ignored (no trigger).",
    "processing_album": "Processing album {id}...",
    "file_creation_failed": "Failed to create file {filename}: {error}",
    "status_update_failed": "Failed to update status: {error}",
    "download_media_failed": "Failed to download media file (type: {type}).",
    "unsupported_mime_type": "Unsupported file type '{mime_type}' ({filename}). Processing as text.",
    "process_media_failed": "Error processing media: {error} (type: {type})",
    "file_send_failed": "Failed to send file {filename}: {error}",
    "temp_dir_deleted": "Temporary directory {dir} deleted.",
    "client_started": "Client started and listening for incoming messages...",
    "script_terminated": "Script execution finished.",
    "history_collection_started": "History collection started for groups: {groups}, messages: {count}",
    "history_collection_error": "Error getting history for group {group_id}: {e}",
    "history_load_error": "Error loading history from {path}: {error}",
    "history_save_error": "Error saving history to {path}: {error}",
    "history_content_truncated": " ... (content truncated)",
    "history_part_deserialize_error": "Failed to deserialize history part: {part}. Error: {e}"
  },
  "prompts": {
    "search_specialist": "You are an AI assistant specializing in information retrieval. Your sole task is to execute the following search query and return a detailed, structured summary of the information found. Do not add any extra commentary. Query: '{search_query}'"
  },
  "system_instruction": "You are a versatile assistant for various tasks. Your main goal is to assist the user by answering questions, providing information, and executing commands. You can use various tools to perform tasks such as internet search, video analysis, and image generation. Always strive to give accurate and helpful responses.",
  "commands": {
    "gemini": {
      "triggers": ["??gem"],
      "description": "Main request to Gemini with support for files and tools.",
      "enabled": true
    },
    "chat": {
      "triggers": ["??chat"],
      "description": "Manage sessions (chats).",
      "enabled": true,
      "subcommands": {
        "help": {"triggers": ["help", "h"]},
        "list": {"triggers": ["list", "ls"]},
        "create": {"triggers": ["create", "new", "c"]},
        "switch": {"triggers": ["switch", "s"]},
        "delete": {"triggers": ["delete", "del", "d"]},
        "rename": {"triggers": ["rename", "mv", "ren"]},
        "stats": {"triggers": ["stats", "info", "st"]}
      }
    },
    "instruction": {
        "triggers": ["??inst"],
        "description": "Manage the system instruction (prompt).",
        "enabled": true,
        "subcommands": {
          "set": ["set"],
          "delete": ["delete", "del"],
          "show": ["show"],
          "global": ["global"]
        }
    },
    "clear": {
        "triggers": ["??clear"],
        "description": "Clears the history of the current session.",
        "enabled": true
    },
    "global_mode": {
        "triggers": ["??global"],
        "description": "Enables/disables global mode in a group (admin).",
        "enabled": true,
        "subcommands": {
            "on": ["on"],
            "off": ["off"]
        }
    },
    "model": {
        "triggers": ["??model"],
        "description": "Manage the Gemini model being used (admin).",
        "enabled": true
    },
    "help": {
        "triggers": ["??help"],
        "description": "Shows this message.",
        "enabled": true
    }
  },
  "tool_statuses": {
    "run_search_specialist": "üîé Searching the internet...",
    "get_chat_history_tool_async": "üìñ Analyzing chat history...",
    "view_youtube_video": "üé¨ Watching YouTube video...",
    "download_youtube_video": "üì• Downloading video...",
    "generate_video_from_prompt": "üé® Generating video...",
    "generate_photo_from_prompt": "üé® Painting a masterpiece...",
    "default": "ü§ñ Performing a complex operation..."
  },
  "replies": {
    "thinking": "‚úçÔ∏è Thinking...",
    "empty_user_prompt": "Please enter a prompt or attach a file after `{trigger}`.",
    "empty_response": "‚ö†Ô∏è Received an empty response.",
    "history_cleared": "‚úÖ Current session history has been cleared.",
    "file_sent": "‚úÖ The file `{filename}` was created and will be sent.",
    "code_sent": "‚úÖ The code block was saved to `{filename}` and will be sent.",
    "admin_only_command": "‚õî This command is only available to administrators.",
    "global_mode_on": "‚úÖ Global mode in this chat is now **enabled**.",
    "global_mode_off": "‚úÖ Global mode in this chat is now **disabled**.",
    "global_mode_usage_options": "on/off",
    "main_help_header": "ü§ñ **List of available commands:**\n\n",
    "main_help_line": "`{triggers}` - {description}\n",
    "main_help_footer": "\nUse `{chat_trigger} help` and `{instruction_trigger} help` for more details.",
    "chat_help": {
        "header": "Chat (Session) Management:",
        "line_format": "`... {triggers}` - {description}",
        "lines": {
            "list": "list chats",
            "create": "create and switch",
            "switch": "switch to",
            "delete": "delete",
            "rename": "rename",
            "stats": "info on the current chat"
        },
        "footer": "\nCurrent chat: **{session_name}**"
    },
    "chat_list_empty": "You don't have any chats yet. Create your first one:\n`{example_command}`",
    "chat_list_header": "Your chat list:",
    "chat_list_line": "{icon} `{name}` ({msg_count} msgs, {date_str})",
    "chat_stats_no_active": "No active session found to display stats.",
    "chat_stats_full": "üìä **Chat Stats for \"{name}\"**\n\nCreated: `{created}`\nModified: `{modified}`\nMessages: `{msg_count}`\nSize: `{size_kb:.2f} KB`\n\nTokens (total/prompt/output): `{total_tokens}` / `{prompt_tokens}` / `{output_tokens}`\nCost: `${total_cost:.6f}`",
    "instruction_cannot_be_empty": "‚ùå Instruction cannot be empty.",
    "instruction_personal_set": "‚úÖ Personal instruction has been set.\nTitle: {title}",
    "instruction_global_set": "‚úÖ Global default instruction has been set.\nTitle: {title}",
    "instruction_no_title": "Untitled",
    "instruction_personal_not_found": "‚ùå You don't have a personal instruction.",
    "instruction_personal_deleted": "‚úÖ Personal instruction has been deleted. Now using the global one.",
    "instruction_delete_failed": "‚ùå Error while deleting the instruction.",
    "instruction_info_header": "üìã **Instruction Information:**\n\n",
    "instruction_info_personal_section": "üî∏ **Your Personal Instruction:**\nTitle: {title}\nLength: {length} characters\nCreated: {created_at}\n\n",
    "instruction_info_personal_none": "üî∏ **Personal Instruction:** not set\n\n",
    "instruction_info_global_section": "üîπ **Global Instruction:**\nTitle: {title}\nLength: {length} characters\nCreated: {created_at}\n\n",
    "instruction_info_global_fallback": "üîπ **Global Instruction:** using from config.py\n\n",
    "instruction_info_active_section": "üéØ **Currently Active Instruction** ({length} characters):\n`{preview}`",
    "instruction_help": "Instruction Management:\n`... set <text>` - set personal\n`... delete` - delete personal\n`... show` - show info\n`... global <text>` - set global (admin)",
    "history_group_header": "\n--- History of group '{name}' (ID: {id}) ---\n",
    "history_no_messages_in_group": "No messages found in this group.",
    "history_media_tag": "Media file",
    "youtube_download_success": "Video '{title}' ({size_mb} MB) downloaded.",
    "photo_generation_success": "Image for prompt: '{prompt}'.",
    "video_generation_success": "Video for prompt: '{prompt}' ({size_mb} MB).",
    "model_changed_success": "‚úÖ Model for '{type}' successfully changed to `{name}`.",
    "model_current_status": "Current models:\n- Chat: `{chat_model}`\n- Image: `{image_model}`",
    "history_unknown_sender": "Unknown",
    "history_sender_id_prefix": "ID: "
  },
  "errors": {
      "telegram_client_not_initialized": "Error: Telegram client not initialized.",
      "youtube_url_not_found": "Could not find a YouTube video link in the request. Please provide a direct link.",
      "youtube_download_failed": "Failed to download video. Error: {error}",
      "youtube_analysis_failed": "Failed to analyze video. Error: {error}",
      "video_generation_disabled": "Video generation is currently disabled due to high generation costs.",
      "video_generation_failed": "Failed to generate video. Error: {error}",
      "image_generation_failed": "Failed to generate image. Error: {error}",
      "image_generation_no_images_returned": "Failed to generate image. The API returned no result.",
      "search_specialist_requires_2_keys": "Error: The search assistant requires at least 2 API keys.",
      "search_specialist_error": "An internal error occurred while trying to search: {error}",
      "gemini_no_available_clients": "No available Gemini clients.",
      "gemini_no_available_clients_for_video": "No available Gemini clients for video generation.",
      "gemini_no_available_clients_for_image": "No available Gemini clients for image generation.",
      "gemini_clients_not_initialized": "Critical Error: Gemini clients are not initialized.",
      "gemini_api_error": "API Error: {error}. Switching client...",
      "gemini_all_keys_failed": "All API keys are temporarily unavailable. Please try again later.",
      "gemini_empty_or_blocked_response": "Error: Received an empty or blocked response from Gemini. {reason}",
      "gemini_unknown_reason": "Reason unknown.",
      "gemini_safety_reason": "Your prompt or the model's response likely violated the safety policy.",
      "gemini_recitation_reason": "The response was blocked due to potential recitation.",
      "gemini_server_fell": "Error: The servers are down.",
      "gemini_critical_error": "Critical error calling Gemini API: {error}\n{traceback}",
      "gemini_unexpected_error": "An unexpected error occurred.",
      "action_file_not_found": "Error: File to send not found at path {path}",
      "action_file_send_error": "Error sending file via ACTION: {error}",
      "reply_file_send_failed": "Failed to send file `{filename}`.",
      "invalid_argument_usage": "Invalid argument. Usage: `{command} {usage}`",
      "chat_unknown_subcommand": "Unknown subcommand '{subcommand}'. Use `{trigger} help`.",
      "history_no_groups_found": "No suitable groups found for history collection. Ensure the names are correct and the groups are in the allowed list.",
      "history_collection_failed_for_group": "Failed to get history for group {group_id}.",
      "unknown_function_call": "Error: Unknown function '{name}'.",
      "model_invalid_usage": "Invalid usage. Example: `{trigger} chat gemini-2.5-pro`",
      "argument_missing": {
        "chat_create": "You must specify a chat name: `... create <name>`",
        "chat_switch": "You must specify a chat name: `... switch <name>`",
        "chat_delete": "You must specify a chat name: `... delete <name>`",
        "chat_rename": "You must specify the old and new name: `... rename <old> <new>`"
      }
  },
  "session_manager": {
    "default_chat_name": "Main Chat",
    "unnamed_session": "Unnamed",
    "session_exists": "A session named '{name}' already exists.",
    "session_created": "Created and activated new session: '{name}'.",
    "session_switched": "Switched active session to: '{name}'.",
    "session_not_found": "Session named '{name}' not found.",
    "cannot_delete_last": "Cannot delete the only session.",
    "session_deleted": "Session '{name}' has been deleted.",
    "session_deleted_and_switched": "Session '{deleted_name}' deleted.\nSwitched active session to '{new_active_name}'.",
    "name_taken": "The name '{name}' is already taken.",
    "renamed": "Session '{old_name}' has been renamed to '{new_name}'."
  },
  "tool_descriptions": {
      "get_chat_history": "Collects message history from specified public Telegram groups. Use when the user asks what was discussed in a chat.",
      "view_youtube_video": "Analyzes the content of a YouTube video by its link and answers the user's question.",
      "download_youtube_video": "Downloads video or audio from a YouTube link found in the text.",
      "param_video_url_or_text": "Text containing the link to the video for download.",
      "param_quality": "Quality: 'best', '1080p', '720p', '480p', '360p', '240p', '144p'",
      "param_audio_only": "True if only audio should be downloaded.",
      "run_search_specialist": "Searches for up-to-date information on the internet using a specialized AI assistant. Use this tool when the user asks to find something, check facts, provide fresh data, or when you need to access a page. It can view URLs, just send it along with the prompt.",
      "param_search_query": "The exact search query.",
      "generate_video_from_prompt": "Creates a video file based on a detailed text description (prompt). Use this function when the user explicitly asks to 'generate a video', 'create a clip', 'make an animation', etc. Do not use for searching for videos.",
      "param_video_prompt": "A detailed description of the scene, characters, actions, and style for the video generation.",
      "param_video_aspect_ratio": "Aspect ratio of the video. Available values: '16:9' (horizontal) or '9:16' (vertical). Default is '16:9'.",
      "generate_photo_from_prompt": "Creates a photorealistic or stylized image from a text description (prompt). Use when the user asks to 'draw', 'generate a picture', 'create a photo', etc. To exclude something, write it directly in the prompt, for example '... with no text in the image'.",
      "param_photo_prompt": "A detailed description of the image. The more detailed, the better the result.",
      "param_photo_aspect_ratio": "Aspect ratio. Available values: '1:1', '16:9', '9:16'. Default is '1:1' (square)."
  },
  "supported_mime_types": [
    "image/jpeg", "image/png", "image/webp", "image/heic", "image/heif",
    "audio/wav", "audio/mp3", "audio/aiff", "audio/aac", "audio/ogg", "audio/flac",
    "video/mp4", "video/mpeg", "video/mov", "video/avi", "video/x-flv", "video/mpg", "video/webm", "video/wmv", "video/3gpp",
    "application/pdf", "text/plain", "text/html", "text/css", "application/json",
    "text/csv", "text/markdown", "text/x-python", "application/x-python-code",
    "text/javascript", "application/x-javascript", "text/x-typescript",
    "application/typescript", "text/xml", "application/rtf"
  ]
}